---
swagger: "2.0"
info:
  version: "1.0"
  title: "order-app"
basePath: "/Dev"
schemes:
  - "https"
paths:
  /orders:
    get:
      responses: {}
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [ApiGwExecutionRole, Arn]
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetOrders.Arn}/invocations
        passthroughBehavior: "when_no_match"
      security:
        - MyCognitoAuthorizer:
            - "order-api/auth_order"
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "aws"
        credentials:
          Fn::GetAtt: [ApiGwExecutionRole, Arn]
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${OrderQueue.QueueName}
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
        requestTemplates:
          application/json: 'Action=SendMessage&MessageBody={"data":$input.json(''$''),"cognito_userid":"$context.authorizer.claims[''sub'']"}'
        passthroughBehavior: "when_no_match"
      security:
        - MyCognitoAuthorizer:
            - "order-api/auth_order"
  /orders/{orderId+}:
    get:
      responses: {}
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [ApiGwExecutionRole, Arn]
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetSingleOrder.Arn}/invocations
        passthroughBehavior: "when_no_match"
      security:
        - MyCognitoAuthorizer:
            - "order-api/auth_order"
    put:
      produces:
        - "application/json"
      parameters:
        - name: "orderId"
          in: "path"
          required: true
          type: "string"
      responses: {}
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [ApiGwExecutionRole, Arn]
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateOrder.Arn}/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
      security:
        - MyCognitoAuthorizer:
            - "order-api/auth_order"
    delete:
      responses: {}
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [ApiGwExecutionRole, Arn]
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteOrder.Arn}/invocations
        passthroughBehavior: "when_no_match"
      security:
        - MyCognitoAuthorizer:
            - "order-api/auth_order"